{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gabbilaborwit/Desktop/curry-index/curry-index/src/App.js\";\n// Make maps update without manual refresh?\n// Modules\nimport React, { Component } from \"react\";\nimport Image from 'react-bootstrap/Image';\nimport AddCurryModal from './AddCurryModal'; // import noodleheadRed from './noodlehead-red.jpg';\n\nimport curryBowl from \"./currybowllg.svg\"; // CSS\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction throwError(inputName) {\n  document.getElementById(inputName + \"-label\").style = \"color: #dc3545; font-weight: 600\";\n} // Store curry list in local storage\n\n\nfunction store(lizt) {\n  localStorage.setItem('curryList', JSON.stringify(lizt));\n} // Load from storage\n\n\nfunction load() {\n  let unparsedCurryList = localStorage.getItem('curryList'); //Using && to condition on unparsedCurryList else null\n\n  return unparsedCurryList && JSON.parse(unparsedCurryList);\n} // Globals\n\n\nlet loaded_curryList = load();\n\nclass Curry extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-sm-12 col-md-6 mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 mt-sm-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12 col-md-7 col-lg-6\",\n            children: /*#__PURE__*/_jsxDEV(Image, {\n              alt: \"curry\",\n              src: this.props.pic,\n              className: \"card-images\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12 col-md-5 col-lg-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"mb-0 mt-2 mt-md-0 curry-card-title\",\n              children: this.props.restaurant\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: this.props.curry\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Taste notes: \", this.props.tastingNotes, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 33\n              }, this), \"Rating: \", this.props.rating, \"/5\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"delete-btn\",\n              onClick: e => this.props.deleteItem(e, this.props.i),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addItem = e => {\n      e.preventDefault(); // Error checker: make sure all input values are filled (except excluded inputs if any)\n\n      let excludedInputs = \"tastingNotes\";\n      let error = false; // Go through each input field and make sure it's not empty\n\n      for (var i = 0; i < 5; i++) {\n        if (e.target[i].value === \"\" && !excludedInputs.includes(e.target[i].name)) {\n          throwError(e.target[i].name);\n          error = true;\n        } else if (document.getElementById(e.target[i].name + \"-label\").style.color !== \"#212529\") {\n          document.getElementById(e.target[i].name + \"-label\").style.color = \"#212529\";\n          document.getElementById(e.target[i].name + \"-label\").style.fontWeight = \"400\";\n        }\n      }\n\n      if (error === true) {\n        document.getElementsByClassName(\"req\")[0].style.color = \"#dc3545\";\n        return null;\n      }\n\n      let currCurryList = this.state.curryList;\n      let newCurry = {};\n\n      for (i = 0; i < 5; i++) {\n        // If optional inputs empty, fill with \"None\"\n        if (excludedInputs.includes(e.target[i].name) && e.target[i].value === \"\") {\n          e.target[i].value = \"N/A\";\n        }\n\n        newCurry[e.target.elements[i].name] = e.target[i].value;\n      }\n\n      if (this.state.pictures.length === 0) {\n        newCurry[\"pic\"] = curryBowl;\n      } else {\n        newCurry[\"pic\"] = this.state.pictures;\n      }\n\n      currCurryList.push(newCurry);\n      this.setState({\n        curryList: currCurryList\n      });\n      store(currCurryList); // close modal\n\n      this.setModalShow(false); // Start animation: Falling curry bowls\n\n      this.setState({\n        curryFalling: true\n      });\n    };\n\n    this.deleteItem = (event, i) => {\n      event.stopPropagation(); // Makes the delete button work\n\n      let currCurryList = this.state.curryList;\n      currCurryList.splice(i, 1);\n      this.setState({\n        curryList: currCurryList\n      });\n      store(currCurryList);\n    };\n\n    this.state = {\n      //Using || for backup assignment if no curryList in storage\n      curryList: loaded_curryList || [],\n      newCurryContent: \"\",\n      modalShow: false,\n      curryFalling: false,\n      pictures: []\n    };\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  onDrop(pictureFiles, pictureDataURLs) {\n    this.setState({\n      pictures: pictureDataURLs\n    });\n  }\n\n  renderCurryItem(restaurant, curryType, tastingNotes, rating, pict, i) {\n    return /*#__PURE__*/_jsxDEV(Curry, {\n      restaurant: restaurant,\n      curry: curryType,\n      tastingNotes: tastingNotes,\n      rating: rating,\n      i: i,\n      deleteItem: this.deleteItem,\n      pic: pict\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 16\n    }, this);\n  }\n\n  setModalShow(bool) {\n    // on open, reset picture stored for upload so no repeats if someone doesn't upload one\n    if (bool === true) {\n      this.setState({\n        pictures: []\n      });\n    }\n\n    this.setState({\n      modalShow: bool\n    });\n  }\n\n  render() {\n    let curriesInIndex = [];\n\n    if (this.state.curryList !== null) {\n      for (let i = 0; i < this.state.curryList.length; i++) {\n        let curry = this.state.curryList[i];\n        curriesInIndex.push(this.renderCurryItem(curry.restaurantName, curry.curryType, curry.tastingNotes, curry.curryRating, curry.pic, i));\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"bootstrap-overrides\",\n      children: [this.state.curryFalling && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"falling-curry container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          onAnimationEnd: () => this.setState({\n            curryFalling: false\n          }),\n          className: \"fallingLeaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"fallingLeaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"fallingLeaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"fallingLeaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"fallingLeaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"fallingLeaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"fallingLeaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"fallingLeaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"fallingLeaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"fallingLeaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"fallingLeaves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header pb-0 pb-md-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"mb-0\",\n          children: \"Saved Curries\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"link-like-span\",\n          onClick: () => this.setModalShow(true),\n          children: \"+ Add New Curry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [this.state.curryList === [] && \"No curries in index. Add one to begin!\", curriesInIndex]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AddCurryModal, {\n        show: this.state.modalShow,\n        onHide: () => this.setModalShow(false),\n        currySetter: this.addItem,\n        onDrop: this.onDrop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/gabbilaborwit/Desktop/curry-index/curry-index/src/App.js"],"names":["React","Component","Image","AddCurryModal","throwError","inputName","document","getElementById","style","store","lizt","localStorage","setItem","JSON","stringify","load","unparsedCurryList","getItem","parse","loaded_curryList","Curry","render","props","pic","restaurant","curry","tastingNotes","rating","e","deleteItem","i","App","constructor","addItem","preventDefault","excludedInputs","error","target","value","includes","name","color","fontWeight","getElementsByClassName","currCurryList","state","curryList","newCurry","elements","pictures","length","curryBowl","push","setState","setModalShow","curryFalling","event","stopPropagation","splice","newCurryContent","modalShow","onDrop","bind","pictureFiles","pictureDataURLs","renderCurryItem","curryType","pict","bool","curriesInIndex","restaurantName","curryRating"],"mappings":"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","sourcesContent":["// Make maps update without manual refresh?\n\n// Modules\nimport React, { Component } from \"react\";\nimport Image from 'react-bootstrap/Image';\nimport AddCurryModal from './AddCurryModal';\n// import noodleheadRed from './noodlehead-red.jpg';\nimport curryBowl from './currybowllg.svg';\n\n// CSS\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction throwError(inputName) {\n    document.getElementById(inputName + \"-label\").style = \"color: #dc3545; font-weight: 600\";\n}\n\n// Store curry list in local storage\nfunction store(lizt) {\n    localStorage.setItem('curryList', JSON.stringify(lizt))\n}\n\n// Load from storage\nfunction load() {\n    let unparsedCurryList = localStorage.getItem('curryList')\n    //Using && to condition on unparsedCurryList else null\n    return (unparsedCurryList && JSON.parse(unparsedCurryList))\n}\n\n// Globals\nlet loaded_curryList = load();\n\nclass Curry extends React.Component {\n    render() {\n        return (\n            <div className=\"col-sm-12 col-md-6 mb-4\">\n                <div className=\"mt-4 mt-sm-auto\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-md-7 col-lg-6\">\n                            <Image alt=\"curry\" src={this.props.pic} className=\"card-images\" />\n                        </div>\n                        <div className=\"col-12 col-md-5 col-lg-6\">\n                            <h2 className=\"mb-0 mt-2 mt-md-0 curry-card-title\">{this.props.restaurant}</h2>\n                            <h3>{this.props.curry}</h3>\n                            <p>\n                                Taste notes: {this.props.tastingNotes}\n                                <br />Rating: {this.props.rating}/5\n                            </p>\n\n                            <span className=\"delete-btn\" onClick={(e) => this.props.deleteItem(e, this.props.i)}>\n                                Delete\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            //Using || for backup assignment if no curryList in storage\n            curryList: loaded_curryList || [],\n            newCurryContent: \"\",\n            modalShow: false,\n            curryFalling: false,\n            pictures: []\n        }\n        this.onDrop = this.onDrop.bind(this);\n    }\n\n    onDrop(pictureFiles, pictureDataURLs) {\n        this.setState({\n            pictures: pictureDataURLs\n        });\n    }\n\n    renderCurryItem(restaurant, curryType, tastingNotes, rating, pict, i) {\n        return <Curry restaurant={restaurant} curry={curryType} tastingNotes={tastingNotes} rating={rating} i={i} key={i} deleteItem={this.deleteItem} pic={pict} />\n    }\n\n    addItem = (e) => {\n        e.preventDefault();\n        // Error checker: make sure all input values are filled (except excluded inputs if any)\n        let excludedInputs = \"tastingNotes\";\n        let error = false;\n        // Go through each input field and make sure it's not empty\n        for (var i = 0; i < 5; i++) {\n            if (e.target[i].value === \"\" && !excludedInputs.includes(e.target[i].name)) {\n                throwError(e.target[i].name);\n                error = true;\n            }\n            else if (document.getElementById(e.target[i].name + \"-label\").style.color !== \"#212529\") {\n                document.getElementById(e.target[i].name + \"-label\").style.color = \"#212529\";\n                document.getElementById(e.target[i].name + \"-label\").style.fontWeight = \"400\"\n            }\n        }\n        if (error === true) {\n            document.getElementsByClassName(\"req\")[0].style.color = \"#dc3545\";\n            return null\n        }\n\n        let currCurryList = this.state.curryList;\n\n        let newCurry = {};\n        for (i = 0; i < 5; i++) {\n            // If optional inputs empty, fill with \"None\"\n            if (excludedInputs.includes(e.target[i].name) && e.target[i].value === \"\") {\n                e.target[i].value = \"N/A\"\n            }\n\n            newCurry[e.target.elements[i].name] = e.target[i].value;\n        }\n        if(this.state.pictures.length === 0){\n            newCurry[\"pic\"] = curryBowl\n        }\n        else{\n            newCurry[\"pic\"] = this.state.pictures;\n        }\n\n        currCurryList.push(newCurry)\n        this.setState({ curryList: currCurryList });\n        store(currCurryList)\n\n        // close modal\n        this.setModalShow(false);\n\n        // Start animation: Falling curry bowls\n        this.setState({ curryFalling: true });\n    };\n\n    deleteItem = (event, i) => {\n        event.stopPropagation(); // Makes the delete button work\n        let currCurryList = this.state.curryList;\n        currCurryList.splice(i, 1);\n        this.setState({ curryList: currCurryList });\n        store(currCurryList);\n    };\n\n    setModalShow(bool) {\n        // on open, reset picture stored for upload so no repeats if someone doesn't upload one\n        if(bool === true){\n            this.setState({\n                pictures:[]\n            })\n        }\n        this.setState({ modalShow: bool });\n    }\n\n    render() {\n        let curriesInIndex = [];\n        if (this.state.curryList !== null) {\n            for (let i = 0; i < this.state.curryList.length; i++) {\n                let curry = this.state.curryList[i];\n                curriesInIndex.push(\n                    this.renderCurryItem(\n                        curry.restaurantName,\n                        curry.curryType,\n                        curry.tastingNotes,\n                        curry.curryRating,\n                        curry.pic,\n                        i\n                    )\n                );\n            }\n        }\n\n        return (\n            <div id=\"bootstrap-overrides\">\n                { this.state.curryFalling &&\n                    <span className=\"falling-curry container\">\n                        <span onAnimationEnd={() => this.setState({ curryFalling: false })} className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                    </span>\n                }\n                {/* Curry Index: List of curries */}\n                <div className=\"header pb-0 pb-md-3\">\n                    <h1 className=\"mb-0\">Saved Curries</h1>\n                    <span className=\"link-like-span\" onClick={() => this.setModalShow(true)}>\n                        + Add New Curry\n                    </span>\n                </div>\n\n                <div className=\"row\">\n                    {this.state.curryList === [] &&\n                        \"No curries in index. Add one to begin!\"\n                    }\n                    {curriesInIndex}\n                </div>\n                <AddCurryModal\n                    show={this.state.modalShow}\n                    onHide={() => this.setModalShow(false)}\n                    currySetter={this.addItem}\n                    onDrop ={this.onDrop}\n                />\n            </div >\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}