[{"/Users/gabbilaborwit/Desktop/curry-index/curry-index/src/App.js":"1","/Users/gabbilaborwit/Desktop/curry-index/curry-index/src/index.js":"2","/Users/gabbilaborwit/Desktop/curry-index/curry-index/src/Map.js":"3","/Users/gabbilaborwit/Desktop/curry-index/curry-index/src/Nav.js":"4","/Users/gabbilaborwit/Desktop/curry-index/curry-index/src/AddCurryModal.js":"5"},{"size":7855,"mtime":1607747983943,"results":"6","hashOfConfig":"7"},{"size":1221,"mtime":1607618413310,"results":"8","hashOfConfig":"7"},{"size":8426,"mtime":1607729088245,"results":"9","hashOfConfig":"7"},{"size":720,"mtime":1607618938297,"results":"10","hashOfConfig":"7"},{"size":4474,"mtime":1607719643360,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jz396l",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/gabbilaborwit/Desktop/curry-index/curry-index/src/App.js",[],"/Users/gabbilaborwit/Desktop/curry-index/curry-index/src/index.js",[],["24","25"],"/Users/gabbilaborwit/Desktop/curry-index/curry-index/src/Map.js",["26"],"// HOW TO USE MAPS API: https://dev.to/jessicabetts/how-to-use-google-maps-api-and-react-js-26c2\n\n// Modules\nimport React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport Geocode from \"react-geocode\";\nimport Image from 'react-bootstrap/Image';\nimport curryBowl from './currybowllg.svg';\nimport AddCurryModal from './AddCurryModal';\n\n// CSS\nimport './Map.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nGeocode.setApiKey('AIzaSyAYZ0l37RYVyu6rfb-K6WEP1tbFrPfJmKM');\n\nconst mapStyles = {\n    width: '80%',\n    height: '330px',\n    position: 'relative'\n};\n\nfunction throwError(inputName) {\n    document.getElementById(inputName + \"-label\").style = \"color: #dc3545; font-weight: 600\";\n}\n\n// Store curry list in local storage\nfunction store(lizt) {\n    localStorage.setItem('curryList', JSON.stringify(lizt))\n}\n\nfunction loadCurryList() {\n    let unparsedCurryList = localStorage.getItem('curryList')\n    //Using && to condition on unparsedCurryList else null\n    return (unparsedCurryList && JSON.parse(unparsedCurryList))\n}\n\nfunction loadMarkerInfo() {\n    let markersList = [];\n    if (!loaded_curryList) {\n        loaded_curryList = []\n    }\n    for (let i = 0; i < loaded_curryList.length; i++) {\n        let curry = loaded_curryList[i];\n\n        Geocode.fromAddress(curry.restaurantAddress).then(\n            response => {\n                const { lat, lng } = response.results[0].geometry.location;\n                //   console.log(\"address: \", curry.restaurantAddress, \" \", lat, lng);\n                markersList.push(\n                    { latitude: lat, longitude: lng, name: curry.restaurantName }\n                );\n            },\n            error => {\n                \n                console.error(\"No location found for restaurant \", loaded_curryList[i].restaurantName, \" at \", loaded_curryList[i].restaurantAddress, \"\\nTechnical error for this to follow (just ignore):\\n\", error);\n            }\n        );\n    }\n    return markersList;\n}\n\n// Globals\nlet loaded_curryList = loadCurryList();\nlet loaded_markerInfo = loadMarkerInfo();\n\nclass MapContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            curryList: loaded_curryList || [],\n            restaurants: loaded_markerInfo || [],\n            markerSelected: false,\n            modalShow: false,\n            pictures: []\n        }\n        this.onDrop = this.onDrop.bind(this);\n    }\n\n    onDrop(pictureFiles, pictureDataURLs) {\n        this.setState({\n            pictures: pictureDataURLs\n        });\n    }\n\n    displayMarkers = () => {\n        return this.state.restaurants.map((rest, index) => {\n            return <Marker\n                    key={rest.name + \"_\" + index}\n                    id={index}\n                    position={{\n                        lat: rest.latitude,\n                        lng: rest.longitude\n                    }}\n                    icon = {{url: \"http://maps.google.com/mapfiles/kml/pal2/icon41.png\"}}\n                    onClick={() => this.markerClicked(rest, index)} />\n        })\n    }\n\n    markerClicked(restInfo, index) {\n        this.setState({ markerSelected: true });\n\n        // open infowindow.open(map, marker);\n        document.getElementById(\"instrucs\").innerHTML = \"Selected restaurant: \";\n\n        // Set restaurant name\n        for (var i = 0; i < document.getElementsByClassName(\"rest-name\").length; i++) {\n            document.getElementsByClassName(\"rest-name\")[i].innerHTML = restInfo.name;\n        }\n        \n        // Set curry type\n        document.getElementById(\"curry-img\").src = this.state.curryList[index].pic;\n\n        document.getElementById(\"ranking\").innerHTML = \"#\" + (index + 1);\n\n        document.getElementById(\"curry-type\").innerHTML = this.state.curryList[index].curryType;\n\n        document.getElementById(\"taste-notes\").innerHTML = this.state.curryList[index].tastingNotes;\n\n        document.getElementById(\"rate\").innerHTML = this.state.curryList[index].curryRating;\n    }\n\n    setModalShow(bool) {\n        // on open, reset picture stored for upload so no repeats if someone doesn't upload one\n        if(bool === true){\n            this.setState({\n                pictures:[]\n            })\n        }\n        this.setState({ modalShow: bool });\n    }\n\n    addItem = (e) => {\n        e.preventDefault();\n        // Error checker: make sure all input values are filled (except excluded inputs if any)\n        let excludedInputs = \"tastingNotes\";\n        let error = false;\n        // Go through each input field and make sure it's not empty\n        for (var i = 0; i < 5; i++) {\n            if (e.target[i].value === \"\" && !excludedInputs.includes(e.target[i].name)) {\n                throwError(e.target[i].name);\n                error = true;\n            }\n            else if (document.getElementById(e.target[i].name + \"-label\").style.color !== \"#212529\") {\n                document.getElementById(e.target[i].name + \"-label\").style.color = \"#212529\";\n                document.getElementById(e.target[i].name + \"-label\").style.fontWeight = \"400\"\n            }\n        }\n        if (error === true) {\n            document.getElementsByClassName(\"req\")[0].style.color = \"#dc3545\";\n            return null\n        }\n\n        let currCurryList = this.state.curryList;\n\n        let newCurry = {};\n        for (i = 0; i < 5; i++) {\n            // If optional inputs empty, fill with \"None\"\n            if (excludedInputs.includes(e.target[i].name) && e.target[i].value === \"\") {\n                e.target[i].value = \"N/A\"\n            }\n\n            newCurry[e.target.elements[i].name] = e.target[i].value;\n        }\n        if(this.state.pictures.length === 0){\n            newCurry[\"pic\"] = curryBowl\n        }\n        else{\n            newCurry[\"pic\"] = this.state.pictures;\n        }\n\n        currCurryList.push(newCurry);\n        this.setState({ curryList: currCurryList });\n        store(currCurryList);\n\n        // close modal\n        this.setModalShow(false);\n\n        window.location.reload()\n    }\n\n    render() {\n        return (\n            <div id=\"bootstrap-overrides\">\n                <div id=\"selected-restaurant\">\n                    <span id=\"instrucs\">Select a Pinned Thai Curry Restaurant</span> <span className='rest-name'></span>\n                    <br />\n                    <span className=\"link-like-span\" onClick={() => this.setModalShow(true)}>\n                        + Add New Curry\n                    </span>\n                </div>\n\n                <AddCurryModal\n                    show={this.state.modalShow}\n                    onHide={() => this.setModalShow(false)}\n                    currySetter={this.addItem}\n                    onDrop ={this.onDrop}\n                />\n\n                <div id=\"map-box\">\n                    <Map\n                        google={this.props.google}\n                        zoom={13}\n                        style={mapStyles}\n                        initialCenter={{ lat: 40.4476, lng: -79.9809 }}\n                    >\n                        {this.displayMarkers()}\n                    </Map>\n                </div>\n\n                <div id=\"notice\">Note: if map doesn't update or show markers and curries in index, refresh page</div>\n\n                { this.state.markerSelected &&\n                    <div id=\"selected-curry\" className=\"mt-2 mt-md-2\">\n                        <Image alt=\"curry\" src={curryBowl} id=\"curry-img\" className=\"selected-curry-image left-fl mr-4\" />\n                        <div className=\"left-fl\">\n                            <span className=\"left-fl\">\n                                <span id=\"ranking\">#1</span>\n                            </span>\n\n                            <span className=\"left-fl ml-1 mt-3\">\n                                <h2 className=\"rest-name mb-0\">n</h2>\n                                <h3 id=\"curry-type\">Type</h3>\n                            </span>\n\n                            <div className=\"clear\">\n                                Taste notes: <span id=\"taste-notes\"></span>\n                                <br />\n                                Rating: <span id=\"rate\"></span>/5\n                            </div>\n                        </div>\n                    </div>\n                }\n\n            </div>\n        )\n    }\n}\n\nexport default GoogleApiWrapper({ apiKey: 'AIzaSyAYZ0l37RYVyu6rfb-K6WEP1tbFrPfJmKM' })(MapContainer);","/Users/gabbilaborwit/Desktop/curry-index/curry-index/src/Nav.js",[],"/Users/gabbilaborwit/Desktop/curry-index/curry-index/src/AddCurryModal.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":54,"column":13,"nodeType":"33","messageId":"34","endLine":57,"endColumn":14},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'loaded_curryList', 'loaded_curryList'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation"]