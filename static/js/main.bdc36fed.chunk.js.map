{"version":3,"sources":["currybowllg.svg","AddCurryModal.js","Map.js","Nav.js","App.js","index.js"],"names":["AddCurryModal","props","Modal","id","show","size","backdrop","className","aria-labelledby","centered","Form","onSubmit","currySetter","Body","Label","Control","autoComplete","name","type","placeholder","as","rows","Group","withIcon","buttonText","withPreview","singleImage","label","onChange","onDrop","imgExtension","maxFileSize","Footer","Button","variant","onClick","onHide","Geocode","setApiKey","mapStyles","width","height","position","loaded_curryList","unparsedCurryList","localStorage","getItem","JSON","parse","loadCurryList","loaded_markerInfo","markersList","i","curry","fromAddress","restaurantAddress","then","response","results","geometry","location","lat","lng","push","latitude","longitude","restaurantName","error","console","length","loadMarkerInfo","MapContainer","displayMarkers","state","restaurants","map","rest","index","icon","url","markerClicked","addItem","e","preventDefault","inputName","excludedInputs","target","value","includes","document","getElementById","style","color","fontWeight","getElementsByClassName","lizt","currCurryList","curryList","newCurry","elements","pictures","curryBowl","setState","setItem","stringify","setModalShow","window","reload","markerSelected","modalShow","bind","pictureFiles","pictureDataURLs","this","restInfo","innerHTML","src","pic","curryType","tastingNotes","curryRating","bool","google","zoom","initialCenter","Image","alt","Component","GoogleApiWrapper","apiKey","Nav","to","replace","store","load","Curry","restaurant","rating","deleteItem","React","App","curryFalling","event","stopPropagation","splice","newCurryContent","pict","curriesInIndex","renderCurryItem","onAnimationEnd","Routing","basename","exact","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.bdc36fed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/currybowllg.161ed1e1.svg\";","// Modules\nimport React from \"react\";\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport ImageUploader from 'react-images-upload';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction AddCurryModal(props) {\n    return (\n        <Modal id=\"bootstrap-overrides\"\n            show={props.show}\n            size=\"md\"\n            backdrop=\"static\"\n            className=\"modal-add-curry\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Form onSubmit={props.currySetter}>\n                <Modal.Body className=\"container-fluid\">\n                    <h2 className=\"mb-1\">New Curry Entry</h2>\n                    <div className=\"sublabel req\">* Required field</div>\n                    <br />\n                    <div className=\"row\">\n                        <div className=\"col-8\">\n                            <Form.Label id=\"restaurantName-label\" className=\"mb-1\">Restaurant*</Form.Label><br />\n                            <Form.Control autoComplete=\"off\" size=\"sm\" name=\"restaurantName\" type=\"text\" placeholder=\"Name of Restaurant\" />\n                            <br />\n\n                            <Form.Label id=\"restaurantAddress-label\" className=\"mb-1\">Full Address of Restaurant*</Form.Label>\n                            <br /><span className=\"sublabel\">Can also write as \"Restaurant name, City, State\"</span>\n                            <Form.Control autoComplete=\"off\" size=\"sm\" name=\"restaurantAddress\" type=\"text\" placeholder='e.g. \"123 Thai St, Pittsburgh, PA\"' />\n                            <br />\n\n                            <div className=\"container p-0\">\n                                <div className=\"row\">\n                                    <div className=\"col-8\">\n                                        <Form.Label id=\"curryType-label\" className=\"mb-0\">Curry Name*</Form.Label>\n                                        <br /><span className=\"sublabel\">Include \"curry\" in name</span>\n                                        <Form.Control autoComplete=\"off\" size=\"sm\" name=\"curryType\" type=\"text\" placeholder='e.g. \"Red Curry\"' />\n                                    </div>\n                                    <div className=\"col-4\">\n                                        <Form.Label id=\"curryRating-label\" className=\"mb-0\">Rating*</Form.Label>\n                                        <br /><span className=\"sublabel\">1=worst, 5=best</span>\n                                        <Form.Control autoComplete=\"off\" size=\"sm\" name=\"curryRating\" type=\"text\" placeholder=\"1-5\" />\n                                    </div>\n                                </div>\n                            </div>\n\n                            <br />\n                            <Form.Label id=\"tastingNotes-label\" className=\"mb-1\">Taste Notes</Form.Label>\n                            <Form.Control as=\"textarea\" name=\"tastingNotes\" placeholder=\"Taste description of curry\" rows={3} />\n\n                        </div>\n\n                        <div className=\"col-4\">\n                            <Form.Group>\n                                <ImageUploader\n                                    withIcon={false}\n                                    buttonText='Upload Image'\n                                    withPreview={true}\n                                    singleImage={true}\n                                    label={'Max file size: 5MB \\n Accepted file types: jpg, gif, png'}\n                                    onChange={props.onDrop}\n                                    imgExtension={['.jpg', '.gif', '.png', '.gif']}\n                                    maxFileSize={5242880}\n                                />\n                                {/* <Form.Label className=\"mb-1\">Add a Photo</Form.Label>\n                                <Form.File multiple={false} onChange={props.handleImageUpload} name=\"curryPhoto\" id=\"exampleFormControlFile1\" /> */}\n                            </Form.Group>\n                        </div>\n                    </div>\n\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"outline-secondary\" size=\"sm\" onClick={props.onHide}>Close</Button>\n                    <Button variant=\"primary\" type=\"submit\" size=\"sm\">Save</Button>\n                </Modal.Footer>\n            </Form>\n        </Modal>\n    );\n}\nexport default AddCurryModal;\n","// HOW TO USE MAPS API: https://dev.to/jessicabetts/how-to-use-google-maps-api-and-react-js-26c2\n\n// Modules\nimport React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport Geocode from \"react-geocode\";\nimport Image from 'react-bootstrap/Image';\nimport curryBowl from './currybowllg.svg';\nimport AddCurryModal from './AddCurryModal';\n\n// CSS\nimport './Map.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nGeocode.setApiKey('AIzaSyAYZ0l37RYVyu6rfb-K6WEP1tbFrPfJmKM');\n\nconst mapStyles = {\n    width: '80%',\n    height: '330px',\n    position: 'relative'\n};\n\nfunction throwError(inputName) {\n    document.getElementById(inputName + \"-label\").style = \"color: #dc3545; font-weight: 600\";\n}\n\n// Store curry list in local storage\nfunction store(lizt) {\n    localStorage.setItem('curryList', JSON.stringify(lizt))\n}\n\nfunction loadCurryList() {\n    let unparsedCurryList = localStorage.getItem('curryList')\n    //Using && to condition on unparsedCurryList else null\n    return (unparsedCurryList && JSON.parse(unparsedCurryList))\n}\n\nfunction loadMarkerInfo() {\n    let markersList = [];\n    if (!loaded_curryList) {\n        loaded_curryList = []\n    }\n    for (let i = 0; i < loaded_curryList.length; i++) {\n        let curry = loaded_curryList[i];\n\n        Geocode.fromAddress(curry.restaurantAddress).then(\n            response => {\n                const { lat, lng } = response.results[0].geometry.location;\n                //   console.log(\"address: \", curry.restaurantAddress, \" \", lat, lng);\n                markersList.push(\n                    { latitude: lat, longitude: lng, name: curry.restaurantName }\n                );\n            },\n            error => {\n                \n                console.error(\"No location found for restaurant \", loaded_curryList[i].restaurantName, \" at \", loaded_curryList[i].restaurantAddress, \"\\nTechnical error for this to follow (just ignore):\\n\", error);\n            }\n        );\n    }\n    return markersList;\n}\n\n// Globals\nlet loaded_curryList = loadCurryList();\nlet loaded_markerInfo = loadMarkerInfo();\n\nclass MapContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            curryList: loaded_curryList || [],\n            restaurants: loaded_markerInfo || [],\n            markerSelected: false,\n            modalShow: false,\n            pictures: []\n        }\n        this.onDrop = this.onDrop.bind(this);\n    }\n\n    onDrop(pictureFiles, pictureDataURLs) {\n        this.setState({\n            pictures: pictureDataURLs\n        });\n    }\n\n    displayMarkers = () => {\n        return this.state.restaurants.map((rest, index) => {\n            return <Marker\n                    key={rest.name + \"_\" + index}\n                    id={index}\n                    position={{\n                        lat: rest.latitude,\n                        lng: rest.longitude\n                    }}\n                    icon = {{url: \"http://maps.google.com/mapfiles/kml/pal2/icon41.png\"}}\n                    onClick={() => this.markerClicked(rest, index)} />\n        })\n    }\n\n    markerClicked(restInfo, index) {\n        this.setState({ markerSelected: true });\n\n        // open infowindow.open(map, marker);\n        document.getElementById(\"instrucs\").innerHTML = \"Selected restaurant: \";\n\n        // Set restaurant name\n        for (var i = 0; i < document.getElementsByClassName(\"rest-name\").length; i++) {\n            document.getElementsByClassName(\"rest-name\")[i].innerHTML = restInfo.name;\n        }\n        \n        // Set curry type\n        document.getElementById(\"curry-img\").src = this.state.curryList[index].pic;\n\n        document.getElementById(\"ranking\").innerHTML = \"#\" + (index + 1);\n\n        document.getElementById(\"curry-type\").innerHTML = this.state.curryList[index].curryType;\n\n        document.getElementById(\"taste-notes\").innerHTML = this.state.curryList[index].tastingNotes;\n\n        document.getElementById(\"rate\").innerHTML = this.state.curryList[index].curryRating;\n    }\n\n    setModalShow(bool) {\n        // on open, reset picture stored for upload so no repeats if someone doesn't upload one\n        if(bool === true){\n            this.setState({\n                pictures:[]\n            })\n        }\n        this.setState({ modalShow: bool });\n    }\n\n    addItem = (e) => {\n        e.preventDefault();\n        // Error checker: make sure all input values are filled (except excluded inputs if any)\n        let excludedInputs = \"tastingNotes\";\n        let error = false;\n        // Go through each input field and make sure it's not empty\n        for (var i = 0; i < 5; i++) {\n            if (e.target[i].value === \"\" && !excludedInputs.includes(e.target[i].name)) {\n                throwError(e.target[i].name);\n                error = true;\n            }\n            else if (document.getElementById(e.target[i].name + \"-label\").style.color !== \"#212529\") {\n                document.getElementById(e.target[i].name + \"-label\").style.color = \"#212529\";\n                document.getElementById(e.target[i].name + \"-label\").style.fontWeight = \"400\"\n            }\n        }\n        if (error === true) {\n            document.getElementsByClassName(\"req\")[0].style.color = \"#dc3545\";\n            return null\n        }\n\n        let currCurryList = this.state.curryList;\n\n        let newCurry = {};\n        for (i = 0; i < 5; i++) {\n            // If optional inputs empty, fill with \"None\"\n            if (excludedInputs.includes(e.target[i].name) && e.target[i].value === \"\") {\n                e.target[i].value = \"N/A\"\n            }\n\n            newCurry[e.target.elements[i].name] = e.target[i].value;\n        }\n        if(this.state.pictures.length === 0){\n            newCurry[\"pic\"] = curryBowl\n        }\n        else{\n            newCurry[\"pic\"] = this.state.pictures;\n        }\n\n        currCurryList.push(newCurry);\n        this.setState({ curryList: currCurryList });\n        store(currCurryList);\n\n        // close modal\n        this.setModalShow(false);\n\n        window.location.reload()\n    }\n\n    render() {\n        return (\n            <div id=\"bootstrap-overrides\">\n                <div id=\"selected-restaurant\">\n                    <span id=\"instrucs\">Select a Pinned Thai Curry Restaurant</span> <span className='rest-name'></span>\n                    <br />\n                    <span className=\"link-like-span\" onClick={() => this.setModalShow(true)}>\n                        + Add New Curry\n                    </span>\n                </div>\n\n                <AddCurryModal\n                    show={this.state.modalShow}\n                    onHide={() => this.setModalShow(false)}\n                    currySetter={this.addItem}\n                    onDrop ={this.onDrop}\n                />\n\n                <div id=\"map-box\">\n                    <Map\n                        google={this.props.google}\n                        zoom={13}\n                        style={mapStyles}\n                        initialCenter={{ lat: 40.4476, lng: -79.9809 }}\n                    >\n                        {this.displayMarkers()}\n                    </Map>\n                </div>\n\n                <div id=\"notice\">Note: if map doesn't update or show markers and curries in index, refresh page</div>\n\n                { this.state.markerSelected &&\n                    <div id=\"selected-curry\" className=\"mt-2 mt-md-2\">\n                        <Image alt=\"curry\" src={curryBowl} id=\"curry-img\" className=\"selected-curry-image left-fl mr-4\" />\n                        <div className=\"left-fl\">\n                            <span className=\"left-fl\">\n                                <span id=\"ranking\">#1</span>\n                            </span>\n\n                            <span className=\"left-fl ml-1 mt-3\">\n                                <h2 className=\"rest-name mb-0\">n</h2>\n                                <h3 id=\"curry-type\">Type</h3>\n                            </span>\n\n                            <div className=\"clear\">\n                                Taste notes: <span id=\"taste-notes\"></span>\n                                <br />\n                                Rating: <span id=\"rate\"></span>/5\n                            </div>\n                        </div>\n                    </div>\n                }\n\n            </div>\n        )\n    }\n}\n\nexport default GoogleApiWrapper({ apiKey: 'AIzaSyAYZ0l37RYVyu6rfb-K6WEP1tbFrPfJmKM' })(MapContainer);","import React, { Component } from \"react\";\nimport './Nav.css';\nimport {\n    NavLink,\n    Link\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass Nav extends Component {\n\n    render() {\n        return (\n            <nav id=\"overrides\" className=\"navbar mb-5 px-0\">\n                <Link to=\"/\" replace className=\"navbar-brand\">Custom Curry Index</Link>\n\n                <div className=\"navbar-nav flex-row\">\n                    <NavLink to=\"/\" replace className=\"nav-item nav-link px-1 mr-2\">Curry Index</NavLink>\n\n                    <NavLink to=\"/map\" replace className=\"nav-item nav-link px-1 mx-2\">Map</NavLink>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Nav;","// Make maps update without manual refresh?\n\n// Modules\nimport React, { Component } from \"react\";\nimport Image from 'react-bootstrap/Image';\nimport AddCurryModal from './AddCurryModal';\n// import noodleheadRed from './noodlehead-red.jpg';\nimport curryBowl from './currybowllg.svg';\n\n// CSS\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction throwError(inputName) {\n    document.getElementById(inputName + \"-label\").style = \"color: #dc3545; font-weight: 600\";\n}\n\n// Store curry list in local storage\nfunction store(lizt) {\n    localStorage.setItem('curryList', JSON.stringify(lizt))\n}\n\n// Load from storage\nfunction load() {\n    let unparsedCurryList = localStorage.getItem('curryList')\n    //Using && to condition on unparsedCurryList else null\n    return (unparsedCurryList && JSON.parse(unparsedCurryList))\n}\n\n// Globals\nlet loaded_curryList = load();\n\nclass Curry extends React.Component {\n    render() {\n        return (\n            <div className=\"col-sm-12 col-md-6 mb-4\">\n                <div className=\"mt-4 mt-sm-auto\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-md-7 col-lg-6\">\n                            <Image alt=\"curry\" src={this.props.pic} className=\"card-images\" />\n                        </div>\n                        <div className=\"col-12 col-md-5 col-lg-6\">\n                            <h2 className=\"mb-0 mt-2 mt-md-0 curry-card-title\">{this.props.restaurant}</h2>\n                            <h3>{this.props.curry}</h3>\n                            <p>\n                                Taste notes: {this.props.tastingNotes}\n                                <br />Rating: {this.props.rating}/5\n                            </p>\n\n                            <span className=\"delete-btn\" onClick={(e) => this.props.deleteItem(e, this.props.i)}>\n                                Delete\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            //Using || for backup assignment if no curryList in storage\n            curryList: loaded_curryList || [],\n            newCurryContent: \"\",\n            modalShow: false,\n            curryFalling: false,\n            pictures: []\n        }\n        this.onDrop = this.onDrop.bind(this);\n    }\n\n    onDrop(pictureFiles, pictureDataURLs) {\n        this.setState({\n            pictures: pictureDataURLs\n        });\n    }\n\n    renderCurryItem(restaurant, curryType, tastingNotes, rating, pict, i) {\n        return <Curry restaurant={restaurant} curry={curryType} tastingNotes={tastingNotes} rating={rating} i={i} key={i} deleteItem={this.deleteItem} pic={pict} />\n    }\n\n    addItem = (e) => {\n        e.preventDefault();\n        // Error checker: make sure all input values are filled (except excluded inputs if any)\n        let excludedInputs = \"tastingNotes\";\n        let error = false;\n        // Go through each input field and make sure it's not empty\n        for (var i = 0; i < 5; i++) {\n            if (e.target[i].value === \"\" && !excludedInputs.includes(e.target[i].name)) {\n                throwError(e.target[i].name);\n                error = true;\n            }\n            else if (document.getElementById(e.target[i].name + \"-label\").style.color !== \"#212529\") {\n                document.getElementById(e.target[i].name + \"-label\").style.color = \"#212529\";\n                document.getElementById(e.target[i].name + \"-label\").style.fontWeight = \"400\"\n            }\n        }\n        if (error === true) {\n            document.getElementsByClassName(\"req\")[0].style.color = \"#dc3545\";\n            return null\n        }\n\n        let currCurryList = this.state.curryList;\n\n        let newCurry = {};\n        for (i = 0; i < 5; i++) {\n            // If optional inputs empty, fill with \"None\"\n            if (excludedInputs.includes(e.target[i].name) && e.target[i].value === \"\") {\n                e.target[i].value = \"N/A\"\n            }\n\n            newCurry[e.target.elements[i].name] = e.target[i].value;\n        }\n        if(this.state.pictures.length === 0){\n            newCurry[\"pic\"] = curryBowl\n        }\n        else{\n            newCurry[\"pic\"] = this.state.pictures;\n        }\n\n        currCurryList.push(newCurry)\n        this.setState({ curryList: currCurryList });\n        store(currCurryList)\n\n        // close modal\n        this.setModalShow(false);\n\n        // Start animation: Falling curry bowls\n        this.setState({ curryFalling: true });\n    };\n\n    deleteItem = (event, i) => {\n        event.stopPropagation(); // Makes the delete button work\n        let currCurryList = this.state.curryList;\n        currCurryList.splice(i, 1);\n        this.setState({ curryList: currCurryList });\n        store(currCurryList);\n    };\n\n    setModalShow(bool) {\n        // on open, reset picture stored for upload so no repeats if someone doesn't upload one\n        if(bool === true){\n            this.setState({\n                pictures:[]\n            })\n        }\n        this.setState({ modalShow: bool });\n    }\n\n    render() {\n        let curriesInIndex = [];\n        if (this.state.curryList !== null) {\n            for (let i = 0; i < this.state.curryList.length; i++) {\n                let curry = this.state.curryList[i];\n                curriesInIndex.push(\n                    this.renderCurryItem(\n                        curry.restaurantName,\n                        curry.curryType,\n                        curry.tastingNotes,\n                        curry.curryRating,\n                        curry.pic,\n                        i\n                    )\n                );\n            }\n        }\n\n        return (\n            <div id=\"bootstrap-overrides\">\n                { this.state.curryFalling &&\n                    <span className=\"falling-curry container\">\n                        <span onAnimationEnd={() => this.setState({ curryFalling: false })} className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                        <span className=\"fallingLeaves\"></span>\n                    </span>\n                }\n                {/* Curry Index: List of curries */}\n                <div className=\"header pb-0 pb-md-3\">\n                    <h1 className=\"mb-0\">Saved Curries</h1>\n                    <span className=\"link-like-span\" onClick={() => this.setModalShow(true)}>\n                        + Add New Curry\n                    </span>\n                </div>\n\n                <div className=\"row\">\n                    {curriesInIndex}\n                </div>\n                <AddCurryModal\n                    show={this.state.modalShow}\n                    onHide={() => this.setModalShow(false)}\n                    currySetter={this.addItem}\n                    onDrop ={this.onDrop}\n                />\n            </div >\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {\n    // BrowserRouter as Router,\n    Switch,\n    Route,\n    HashRouter\n} from \"react-router-dom\";\nimport MapContainer from \"./Map\";\nimport Nav from \"./Nav\";\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass Routing extends Component {\n    render() {\n        return (\n                <div className=\"container\">\n                    <HashRouter basename='/'>\n                        <Nav />\n\n                        {/* A <Switch> looks through its children <Route>s and renders the first one that matches the current URL. */}\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <App />\n                            </Route>\n\n                            <Route path=\"/map\">\n                                <MapContainer />\n                            </Route>\n                        </Switch>\n                    </HashRouter>\n                </div>\n        )\n    }\n}\n\n// const Home = () => <div><h2>Home</h2></div>\n// const About = () => <div><h2>About</h2></div>\n\nReactDOM.render(<Routing />, document.getElementById('root'));"],"sourceRoot":""}